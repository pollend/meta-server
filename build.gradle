plugins {
    id "org.standardout.versioneye" version "1.0.1"
}

apply plugin:'java'
apply plugin:'application'
apply plugin:'eclipse'
apply plugin:'pmd'
apply plugin:'checkstyle'
apply plugin:'findbugs'

apply from: 'config/gradle/versioning.gradle'

mainClassName = "org.terasology.web.JettyMain"
applicationName = "meta-server"

group = 'org.terasology.web'

repositories {
    mavenCentral()
	
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
    maven{
        url "https://plugins.gradle.org/m2/"
    }
}

ext {
   jettyVersion = '9.4.6.v20170531'
}

configurations {
    codeMetrics
}

dependencies {
    compile  'org.hibernate:hibernate-core:5.2.11.Final'

    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: jettyVersion
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'org.glassfish.jersey.containers:jersey-container-jetty-servlet:2.22.1'
    compile 'org.glassfish.jersey.ext:jersey-mvc-freemarker:2.22.1'

    compile 'com.google.code.gson:gson:2.4'
    compile 'com.google.guava:guava:18.0'

    compile 'org.jooq:jooq:3.7.0'
    compile 'org.postgresql:postgresql:9.4-1205-jdbc42'

    compile 'com.squareup.retrofit:retrofit:1.9.0'

    compile 'org.slf4j:slf4j-api:1.7.13'

    compile 'com.zaxxer:HikariCP:2.4.1'

    compile 'org.terasology:gestalt-module:4.1.2'

    testCompile 'org.jsoup:jsoup:1.8.3'
    testCompile 'com.jcabi:jcabi-w3c:1.3'
    testCompile 'com.jcabi:jcabi-matchers:1.4'
    testCompile 'junit:junit:4.12'
    testCompile 'com.h2database:h2:1.4.190'

    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'

    checkstyle 'com.puppycrawl.tools:checkstyle:6.7'
    pmd 'net.sourceforge.pmd:pmd-core:5.4.0'
    pmd 'net.sourceforge.pmd:pmd-java:5.4.0'
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'

    codeMetrics(group: 'org.terasology.config', name: 'codemetrics-nosupp', version: '1.0.0', ext: 'zip')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

checkstyle {
    ignoreFailures = true
    config = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/checkstyle.xml")
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "pmd/pmd.xml")
    ruleSets = []
}

findbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilterConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "findbugs/findbugs-exclude.xml")
}

test {
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true

    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true
}

distributions {
    main {
        contents {
            from('.') {
                include 'templates/'
                include 'web/'
            }
        }
    }
}

task stage(dependsOn: ['clean', 'installDist'])
